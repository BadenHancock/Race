using System.Collections;
using System.Collections.Generic;
using UnityEngine;

[RequireComponent(typeof(InputController))]
public class CarController : MonoBehaviour
{
    internal enum DriveType
    {
        AllWheelDrive,
        RearWheelDrive,
        FrontWheelDrive
    }
    [SerializeField]private DriveType drive;
    public InputController im;
    public float horsepower;
    public float handeling;
    private float vertical;
    private float horizontal;
    public float radius;

    [HideInInspector] public bool reverse;

    private GameObject wheelColliders;
    private GameObject wheelMeshes;
    // 0 = front left, 1 = front right, 2 = back left, 3 = back right
    //only 4 wheel drive
    public WheelCollider[] wheels = new WheelCollider[4];
    private GameObject[] wheelMesh = new GameObject[4];
    public Rigidbody rigidbody;
    private GameObject centerOfMass;
    private float KPH;
    private float MPH;
    
    //script starts and initializes all variables
    private void awake()
    {
        getObjects();
    }

    //fixedupdate works better with physics
    private void Update()
    {
        vertical = im.throttle;
        horizontal = im.steer;
        //all wheel drive
        if(drive == DriveType.AllWheelDrive)
        {
            for(int i = 0; i < wheels.Length; i++)
            {
                wheels[i].motorTorque = horsepower/4 * Time.deltaTime * vertical;
            }
        }
        //rear wheel drive
        else if(drive == DriveType.RearWheelDrive)
        {
            //back left wheel
            wheels[2].motorTorque = horsepower/2 * Time.deltaTime * vertical;
            //back right wheel
            wheels[3].motorTorque = horsepower/2 * Time.deltaTime * vertical;
        }
        //front wheel drive
        else
        {
            //front left
            wheels[0].motorTorque = horsepower/2 * Time.deltaTime * im.throttle;
            //front right
            wheels[1].motorTorque = horsepower/2 * Time.deltaTime * im.throttle;
        }
        KPH = rigidbody.velocity.magnitude * 3.6f;
        MPH = KPH * 0.62f;
        Debug.Log("KPH " + KPH);
        Debug.Log("MPH " + MPH);
        steer();
    }
    private void getObjects()
    {
        rigidbody = GetComponent<Rigidbody>();
        im = GetComponent<InputController>();
        wheelColliders = gameObject.transform.Find("wheelColliders").gameObject;
        wheelMeshes = gameObject.transform.Find("wheelMeshes").gameObject;

        wheelMesh[0] = wheelMeshes.transform.Find("0").gameObject;
        wheelMesh[1] = wheelMeshes.transform.Find("1").gameObject;
        wheelMesh[2] = wheelMeshes.transform.Find("2").gameObject;
        wheelMesh[3] = wheelMeshes.transform.Find("3").gameObject;
        centerOfMass = gameObject.transform.Find("mass").gameObject;
        rigidbody.centerOfMass = centerOfMass.transform.localPosition;
    }
    private void steer()
    {
        //ackerman outer wheel steering formula
        //steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius + (1.5f / 2))) * horizontalInput;
        //ackerman inner wheel steering formula
        //steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius + (1.5f / 2))) * horizontalInput;
        if(horizontal > 0)
        {
            wheels[0].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius + (1.5f / 2)) * horizontal);
            wheels[1].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius - (1.5f / 2)) * horizontal);
        }
        else if(horizontal < 0)
        {
            wheels[1].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius + (1.5f / 2)) * horizontal);
            wheels[0].steerAngle = Mathf.Rad2Deg * Mathf.Atan(2.55f / (radius - (1.5f / 2)) * horizontal);
        }
        else
        {
            wheels[0].steerAngle = 0;
            wheels[0].steerAngle = 0;
        }
    }
}
